{
    "version": "2.0.0",
    "inputs": [
      {
        "type": "pickString",
        "id": "model",
        "description": "Which model should I focus on?",
        "options": ["src", "ode", "frame", "aura", "mind", "heart", "soul", "envy", "chaos", "malice", "ghost", "toe"]
      },
      {
        "type": "pickString",
        "id": "container",
        "description": "Which container should I enter?",
        "options": ["lab", "ctx", "tbd", "fil", "pet", "bit"]
      },
      {
        "type": "promptString",
        "id": "dataset",
        "description": "Which dataset will you interact with?",
      },
      {
        "type": "pickString",
        "id": "context",
        "description": "Which context should I use?",
        "options": [
          "default",
          "one"
        ]
      }
    ],
    "tasks": [
      {
        "label": "ps",
        "detail": "View a list of all running containers.",
        "type": "shell",
        "command": "TASK=ps sh controller.sh",
        "windows": {
          "command": "docker compose ps"
        }
      },
      {
        "label": "logs",
        "detail": "View logs for all services.",
        "type": "shell",
        "command": "TASK=logs sh controller.sh",
        "windows": {
          "command": "docker compose logs --follow"
        }
      },
      {
        "label": "exec",
        "detail": "Open an interactive shell in the specified container.",
        "type": "shell",
        "command": "TASK=exec CONTAINER=\"${input:container}\" sh controller.sh",
        "windows": {
          "command": "docker compose exec \\\"${input:container}\\\" /bin/bash"
        }
      },
      {
        "label": "test",
        "detail": "Run all tests.",
        "type": "shell",
        "command": "TASK=test sh controller.sh",
        "windows": {
          "command": "docker compose exec lab robot --outputdir /book/static/tests /src/tests"
        }
      },
      {
        "label": "eval",
        "detail": "Run evaluation harness.",
        "type": "shell",
        "command": "TASK=eval sh controller.sh",
        "windows": {
          "command": "docker compose exec lab sh tests/eval.sh"
        }
      },
      {
        "label": "build",
        "detail": "Build this project in Docker.",
        "type": "shell",
        "command": "TASK=build sh controller.sh",
        "windows": {
          "command": "docker compose -f docker-compose.yml -f docker-compose.gpu.yml build"
        }
      },
      {
        "label": "push",
        "detail": "Push the newly-built Docker image to a registry.",
        "type": "shell",
        "command": "TASK=push sh controller.sh",
        "windows": {
          "command": "docker compose push"
        }
      },
      {
        "label": "pull",
        "detail": "Pull the latest Docker images required by this project.",
        "type": "shell",
        "command": "TASK=pull sh controller.sh",
        "windows": {
          "command": "docker compose pull"
        }
      },
      {
        "label": "up",
        "detail": "Bring this stack of services online.",
        "type": "shell",
        "command": "TASK=up FOCUS=${input:model} sh controller.sh",
        "windows": {
          "command": "$env:FOCUS = '${input:model}'; docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.gpu.yml -f docker-compose.services.yml up"
        }
      },
      {
        "label": "context",
        "detail": "Change Docker context.",
        "type": "shell",
        "command": "docker context use ${input:context}",
        "windows": {
          "command": "docker context use ${input:context}"
        }
      },
      {
        "label": "remote",
        "detail": "Test the local stack against a remote Docker daemon via SSH.",
        "type": "shell",
        "command": "eval \"$(ssh-agent -s)\" && ssh-add one.key && docker context use one && ARCH='ARM' FOCUS=${input:model} docker compose up",
        "windows": {
          "command": "$env:FOCUS = '${input:model}'; docker compose up"
        }
      },
      {
        "label": "upload",
        "detail": "Upload adapters to a remote server via SSH.",
        "type": "shell",
        "command": "eval \"$(ssh-agent -s)\" && ssh-add one.key && scp -i one.key -r data/adapters opc@129.159.66.224:/home/opc/vtx/data",
      },
      {
        "label": "config",
        "detail": "Deploy a config to the remote Docker container.",
        "type": "shell",
        "command": "docker context use one && ARCH='ARM' docker compose cp src/config.yml lab:/src/config.yml && docker context use default"
      },
      {
        "label": "train",
        "detail": "Train a model.",
        "type": "shell",
        "command": "TASK=train FOCUS=${input:model} sh controller.sh",
        "windows": {
          "command": "docker compose -f docker-compose.yml -f docker-compose.services.yml up -d tbd fil; docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.train.yml -f docker-compose.gpu.yml run -e FOCUS=${input:model} lab python3 harness.py"
        },
        "runOptions": {
          "instanceLimit": 5
        },
      },
      {
        "label": "deploy",
        "detail": "Deploy your book to CloudFlare.",
        "type": "shell",
        "command": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec lab python3 /src/scripts/cloudflare.py",
        "windows": {
          "command": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec lab python3 /src/scripts/cloudflare.py"
        }
      },
      {
        "label": "prepare",
        "detail": "Prepare a dataset.",
        "type": "shell",
        "command": "TASK=prepare DATASET=${input:dataset} sh controller.sh",
        "windows": {
          "command": "docker compose -f docker-compose.yml -f docker-compose.dev.yml run lab python3 /lab/${input:dataset}/prepare.py"
        },
        "runOptions": {
          "instanceLimit": 3
        },
      },
      {
        "label": "fetch",
        "detail": "Download a dataset.",
        "type": "shell",
        "command": "TASK=fetch DATASET=${input:dataset} sh controller.sh",
        "windows": {
          "command": "docker compose  -f docker-compose.yml -f docker-compose.dev.yml run lab python3 /lab/${input:dataset}/fetch.py"
        },
        "runOptions": {
          "instanceLimit": 3
        },
      },
      {
        "label": "auto",
        "detail": "Turn on autopilot.",
        "type": "shell",
        "command": "TASK=up FOCUS=${input:model} DETACHED=true sh controller.sh",
        "windows": {
          "command": "$env:FOCUS = '${input:model}'; docker compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.gpu.yml -f docker-compose.services.yml up -d"
        }
      },
      {
        "label": "prune",
        "detail": "Prune all unused images, networks, and volumes.",
        "type": "shell",
        "command": "TASK=prune sh controller.sh",
        "windows": {
          "command": "docker system prune -f && docker volume prune -f"
        }
      },
      {
        "label": "key",
        "detail": "Fetch your Urbit access key.",
        "type": "shell",
        "command": "TASK=key sh controller.sh",
        "windows": {
          "command": "docker compose exec bit /bin/get-urbit-code"
        }
      },
      {
        "label": "down",
        "detail": "Stop the service in Docker.",
        "type": "shell",
        "command": "TASK=down sh controller.sh",
        "windows": {
          "command": "docker compose down --remove-orphans"
        }
      },
      {
        "label": "stats",
        "detail": "View live Docker stats.",
        "type": "shell",
        "command": "TASK=stats sh controller.sh",
        "windows": {
          "command": "docker stats"
        }
      }
    ]
  }
  