{
    "version": "2.0.0",
    "inputs": [
      {
        "type": "pickString",
        "id": "model",
        "description": "Which model should I focus on?",
        "options": ["src", "aura", "frame", "mind", "heart", "soul", "envy", "chaos", "malice", "toe"]
      },
      {
        "type": "pickString",
        "id": "container",
        "description": "Which container should I enter?",
        "options": ["lab", "ctx", "uxo", "tbd", "ipf", "pet", "pen", "bit"]
      },
      {
        "type": "promptString",
        "id": "dataset",
        "description": "Which dataset will you interact with?",
      },
      {
        "type": "pickString",
        "id": "context",
        "description": "Which context should I use?",
        "options": [
          "default",
          "one"
        ]
      },
      {
        "type": "pickString",
        "id": "edge",
        "description": "Which edge function?",
        "options": [
          "cloudflare",
        ]
      }
    ],
    "tasks": [
      {
        "label": "init",
        "detail": "Prepare this workspace.",
        "type": "shell",
        "command": "TASK=init bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'init'; .\\controller.ps1"
        }
      },
      {
        "label": "ps",
        "detail": "View a list of all running containers.",
        "type": "shell",
        "command": "TASK=ps bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'ps'; .\\controller.ps1"
        }
      },
      {
        "label": "stats",
        "detail": "View live Docker stats.",
        "type": "shell",
        "command": "TASK=stats bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'stats'; .\\controller.ps1"
        }
      },
      {
        "label": "logs",
        "detail": "View logs for all services.",
        "type": "shell",
        "command": "TASK=logs bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'logs'; .\\controller.ps1"
        }
      },
      {
        "label": "exec",
        "detail": "Open an interactive shell in the specified container.",
        "type": "shell",
        "command": "TASK=exec CONTAINER=\"${input:container}\" bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'exec'; $env:CONTAINER = '${input:container}'; .\\controller.ps1"
        }
      },
      {
        "label": "test",
        "detail": "Run all tests.",
        "type": "shell",
        "command": "TASK=test bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'test'; .\\controller.ps1"
        }
      },
      {
        "label": "eval",
        "detail": "Run evaluation harness.",
        "type": "shell",
        "command": "TASK=eval bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'eval'; .\\controller.ps1"
        }
      },
      {
        "label": "build",
        "detail": "Build this project in Docker.",
        "type": "shell",
        "command": "TASK=build bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'build'; .\\controller.ps1"
        }
      },
      {
        "label": "push",
        "detail": "Push the newly-built Docker image to a registry.",
        "type": "shell",
        "command": "TASK=push bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'push'; .\\controller.ps1"
        }
      },
      {
        "label": "pull",
        "detail": "Pull the latest Docker images required by this project.",
        "type": "shell",
        "command": "TASK=pull bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'pull'; .\\controller.ps1"
        }
      },
      {
        "label": "up",
        "detail": "Bring this stack of services online.",
        "type": "shell",
        "command": "TASK=up FOCUS=${input:model} bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'up'; $env:FOCUS = '${input:model}'; .\\controller.ps1"
        },
        "runOptions": {
          "instanceLimit": 2
        },
      },
      {
        "label": "context",
        "detail": "Change Docker context.",
        "type": "shell",
        "command": "docker context use ${input:context}",
        "windows": {
          "command": "docker context use ${input:context}"
        }
      },
      {
        "label": "upload",
        "detail": "Upload adapters to a remote server via SSH.",
        "type": "shell",
        "command": "eval \"$(ssh-agent -s)\" && ssh-add one.key && scp -i one.key -r data/adapters opc@129.159.66.224:/home/opc/vtx/data",
      },
      {
        "label": "config",
        "detail": "Deploy a config to the remote Docker container.",
        "type": "shell",
        "command": "eval \"$(ssh-agent -s)\" && ssh-add one.key && docker context use one && docker compose cp ./config.yml lab:/env/config.yml && docker context use default"
      },
      {
        "label": "train",
        "detail": "Train a model.",
        "type": "shell",
        "command": "TASK=train FOCUS=${input:model} bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'train'; $env:FOCUS = '${input:model}'; .\\controller.ps1"
        },
        "runOptions": {
          "instanceLimit": 5
        },
      },
      {
        "label": "trial",
        "detail": "Search for optimal hyperparameters.",
        "type": "shell",
        "command": "TASK=trial FOCUS=${input:model} bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'trial'; $env:FOCUS = '${input:model}'; .\\controller.ps1"
        },
        "runOptions": {
          "instanceLimit": 5
        },
      },
      {
        "label": "deploy",
        "detail": "Deploy your book.",
        "type": "shell",
        "command": "docker compose -f compose.yml -f compose.dev.yml exec lab python3 /src/edge/${input:edge}.py",
        "windows": {
          "command": "docker compose -f compose.yml -f compose.dev.yml exec lab python3 /src/edge/${input:edge}.py"
        }
      },
      {
        "label": "prepare",
        "detail": "Prepare a dataset.",
        "type": "shell",
        "command": "TASK=prepare DATASET=${input:dataset} bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'prepare'; $env:DATASET = '${input:dataset}'; .\\controller.ps1"
        },
        "runOptions": {
          "instanceLimit": 3
        },
      },
      {
        "label": "fetch",
        "detail": "Download a dataset.",
        "type": "shell",
        "command": "TASK=fetch DATASET=${input:dataset} bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'fetch'; $env:DATASET = '${input:dataset}'; .\\controller.ps1"
        },
        "runOptions": {
          "instanceLimit": 3
        },
      },
      {
        "label": "auto",
        "detail": "Turn on autopilot.",
        "type": "shell",
        "command": "TASK=up FOCUS=${input:model} DETACHED=true bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'up'; $env:FOCUS = '${input:model}'; $env:DETACHED = 'true'; .\\controller.ps1"
        }
      },
      {
        "label": "prune",
        "detail": "Prune all unused images, networks, and volumes.",
        "type": "shell",
        "command": "TASK=prune bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'prune'; .\\controller.ps1"
        }
      },
      {
        "label": "clean",
        "detail": "Delete all checkpoints.",
        "type": "shell",
        "command": "TASK=clean bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'clean'; .\\controller.ps1"
        }
      },
      {
        "label": "key",
        "detail": "Fetch your Urbit access key.",
        "type": "shell",
        "command": "TASK=key bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'key'; .\\controller.ps1"
        }
      },
      {
        "label": "down",
        "detail": "Stop the service in Docker.",
        "type": "shell",
        "command": "TASK=down bash controller.sh",
        "windows": {
          "command": "$env:TASK = 'down'; .\\controller.ps1"
        }
      }
    ]
  }
  