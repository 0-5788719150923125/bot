import asyncio
import os
import smtplib
import textwrap
import time
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from apscheduler.schedulers.background import BackgroundScheduler

import head
from common import ad, bc


def main(config) -> None:
    settings = config["smtp"]

    scheduler = BackgroundScheduler()
    scheduler.add_job(
        send_email,
        args=(settings,),
        trigger="cron",
        day_of_week=settings.get("day", "tue"),
        hour=settings.get("hour", 8),
        minute=settings.get("minute", 0),
        timezone="US/Central",
    )
    scheduler.start()
    while True:
        time.sleep(66.6)


def send_email(config):
    smtp_server = os.environ["SMTP_SERVER"]
    smtp_port = int(os.environ["SMTP_PORT"])
    sender_user = os.environ["SMTP_USER"]
    sender_email = os.environ["SMTP_EMAIL"]
    password = os.environ["SMTP_PASSWORD"]

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()

    server.login(sender_user, password)

    for subscriber in config.get("to"):
        print(f"{bc.CORE}ONE@SMTP: {ad.TEXT}" + "sending message to " + subscriber)
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = subscriber
        message["Subject"] = config.get("subject")
        output = asyncio.run(
            head.ctx.prompt(
                prompt=config.get("prompt"),
                min_new_tokens=512,
                max_new_tokens=768,
                disposition=config.get("disposition", None),
                eos_tokens=[
                    "\n",
                    "\n\n",
                    "\\",
                ],
            )
        )

        signed = textwrap.dedent(output) + "\n\n" + "Best Regards," + "\n\n" + "Ryan"
        disclaimer = "This message was automatically-generated by a machine. If you would like to unsubscribe, please [click here](https://unsubscribe.src.eco), or reply to this message."

        message.attach(MIMEText(output, "plain"))
        server.sendmail(sender_email, subscriber, message.as_string())

    # Close the connection
    server.quit()


if __name__ == "main":
    main(config)
